# Automatically build binary wheels and source packages.
name: cibuildwheel

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]

# Do not build Python <=2.7, <=3.5, or PyPy.
# Install Linux and MacOS required libraries / tools.
env:
  CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
  CIBW_SKIP: "cp27-* cp35-* pp*"
  CIBW_TEST_REQUIRES: pytest
  CIBW_TEST_COMMAND: "pytest {project}"
  CIBW_DEPENDENCY_VERSIONS: "pinned"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-10.15]

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.8.1
        env:
          CIBW_BEFORE_BUILD_ALL_LINUX: >
              yum install -y libxslt-devel ||
              apt-get -y install libxslt1-dev libxml2-dev ||
              apk add libxml2-dev libxslt-dev
          CIBW_BEFORE_BUILD_ALL_MACOS: >
              brew uninstall --force --ignore-dependencies libxml2 libxslt libffi &&
              brew cleanup -s libxml2 libxslt libffi &&
              brew cleanup --prune-prefix &&
              brew install libxml2 libxslt automake pkg-config
          CIBW_BEFORE_BULD_ALL_WINDOWS: "call xmlstarlet\build_msvc.bat"
          CIBW_ENVIRONMENT_MACOS: >
              ARCHFLAGS="-arch i386 -arch x86_64"
              PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig:/usr/local/opt/libxml2/lib/pkgconfig:/usr/local/opt/libxslt/lib/pkgconfig"
              LDFLAGS="-L/usr/local/opt/libxml2/lib -L/usr/local/opt/libxslt/lib"
              CPPFLAGS="-I/usr/local/opt/libxml2/include -I/usr/local/opt/libxslt/include -I/usr/local/opt/libffi/include"
          CIBW_ENVIRONMENT_WINDOWS: >
              CIBW_BUILD="*win32 *win_amd64"
              DISTUTILS_USE_SDK=1
              MSSdk=1
        with:
          package-dir: .
          output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"

      # - uses: actions/setup-python@v4
      #   name: Install Python
      #   with:
      #     python-version: '3.7'

      # - uses: ilammy/msvc-dev-cmd@v1
      #   with:
      #     arch: x86

      # - name: Build dependencies & wheels (Windows / x86)
      #   if: runner.os == 'Windows'
      #   shell: cmd
      #   run: |
      #     pip install --upgrade "cibuildwheel>=2.8.1"
      #     call xmlstarlet\build_msvc.bat
      #     python -m cibuildwheel --output-dir wheelhouse
      #   env:
      #     CIBW_BUILD: "*win32"
      #     DISTUTILS_USE_SDK: 1
      #     MSSdk: 1

      # - uses: ilammy/msvc-dev-cmd@v1
      #   with:
      #     arch: amd64

      # - name: Build dependencies & wheels (Windows / amd64)
      #   if: runner.os == 'Windows'
      #   shell: cmd
      #   run: |
      #     pip install --upgrade "cibuildwheel>=2.8.1"
      #     call xmlstarlet\build_msvc.bat
      #     python -m cibuildwheel --output-dir wheelhouse
      #   env:
      #     CIBW_BUILD: "*win_amd64"
      #     DISTUTILS_USE_SDK: 1
      #     MSSdk: 1

      # - name: Build wheels with cibuildwheel (Linux & MacOS)
      #   if: runner.os != 'Windows'
      #   run: |
      #     pip install --upgrade pip wheel setuptools "cibuildwheel>=2.8.1"
      #     python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist_and_test:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist and run tests
        run: |
          sudo apt-get install -yqq libxslt1-dev libxml2-dev
          pip install --upgrade pip setuptools wheel "cibuildwheel>=2.8.1"
          pip --disable-pip-version-check install -r requirements.txt
          pip --disable-pip-version-check install -r requirements_dev.txt
          invoke test coverage

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist_and_test]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
